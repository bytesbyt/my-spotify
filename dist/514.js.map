{"version":3,"file":"514.js?ver=646ae38aab2c454768b4","mappings":"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","sources":["webpack://my-spotify/./src/common/components/ErrorMessage.tsx","webpack://my-spotify/./src/layout/components/LibraryHead.tsx","webpack://my-spotify/./src/layout/components/EmptyPlaylist.tsx","webpack://my-spotify/./src/utils/api.ts","webpack://my-spotify/./src/common/components/PlaylistItem.tsx","webpack://my-spotify/./src/layout/components/Playlist.tsx","webpack://my-spotify/./src/apis/userApi.ts","webpack://my-spotify/./src/hooks/useGetCurrentUserProfile.ts","webpack://my-spotify/./src/layout/components/Library.tsx","webpack://my-spotify/./src/hooks/useGetCurrentUserPlaylists.ts","webpack://my-spotify/./src/apis/playlistAPi.ts","webpack://my-spotify/./src/utils/crypto.ts","webpack://my-spotify/./src/common/components/LoginButton.tsx","webpack://my-spotify/./src/utils/auth.ts","webpack://my-spotify/./src/layout/components/blank_profile.png","webpack://my-spotify/./src/layout/components/Navbar.tsx","webpack://my-spotify/./src/layout/AppLayout.tsx"],"sourcesContent":["import { Alert } from '@mui/material';\nimport React from 'react'\n\ninterface ErrorMessageProps {\n    errorMessage: string;\n}\n\nconst ErrorMessage = ({errorMessage}: ErrorMessageProps) => {\n  return <Alert severity=\"error\">{errorMessage}</Alert>;\n};\n\nexport default ErrorMessage\n","import React from 'react'\nimport { styled, Box, Typography, Button } from \"@mui/material\"\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst Head = styled(\"div\")({\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"8px\",\n    justifyContent: \"space-between\",\n});\n\nconst LibraryHead = () => {\n  return (\n    <Head>\n        <Box display = \"flex\">\n            <BookmarkIcon sx= {{ marginRight: \"20px\" }}/>\n            <Typography variant=\"h2\" fontWeight={700}> Your Library</Typography>\n        </Box>\n        <Button>\n            <AddIcon />\n        </Button>\n    </Head>\n  );\n};\n\nexport default LibraryHead\n","import { Button, Card, styled, Typography } from \"@mui/material\";\nimport React from 'react'\n\nconst EmptyPlaylistCard = styled(Card)(({ theme}) => ({\n    backgroundColor: theme.palette.background.paper,\n    padding: \"20px\",\n    borderRadius: \"8px\"\n})\n);\n\nconst CreatePlaylistButton = styled(Button)({\n    marginTop: \"20px\",\n    fontWeight: \"700\",\n});\n\nconst EmptyPlaylist = () => {\n    return (\n        <EmptyPlaylistCard>\n            <Typography variant = \"h2\" fontWeight={700}> Create your first playlist </Typography>\n            <Typography variant= \"body2\"> It's easy, we'll help you </Typography>\n            <CreatePlaylistButton variant=\"contained\" color=\"secondary\">\n                Create playlist\n            </CreatePlaylistButton>\n\n        </EmptyPlaylistCard>\n    );\n};\n\n\nexport default EmptyPlaylist\n","import axios from \"axios\";\nimport { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\n\nconst api = axios.create({\n    baseURL: SPOTIFY_BASE_URL,\n    headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n    },\n});\n\napi.interceptors.request.use((request)=>{\n    request.headers.Authorization = `Bearer ${localStorage.getItem(\n        \"access_token\"\n    )}`;\n    return request;\n});\n\nexport default api;\n\n\n","import { Avatar, ListItemAvatar, ListItemButton, ListItemText, styled, Typography } from '@mui/material';\nimport React from 'react'\n\nconst PlayListItemContainer = styled(ListItemButton)(({ theme, selected }) => ({\n  padding: \"8px\",\n  alignItems: \"center\",\n  borderRadius: \"8px\",\n  backgroundColor: selected ? theme.palette.action.active : \"\",\n  \"&:hover\": {\n    backgroundColor: theme.palette.action.hover,\n  },\n}));\n\nconst PlaylistAvatar = styled(Avatar)({\n  width: \"48px\",\n  height: \"48px\",\n  borderRadius: \"8px\",\n});\n\nconst PlaylistName = styled(Typography)({\n  fontWeight: \"bold\",\n  color: \"#1db954\",\n});\n\ninterface PlaylistItemProps {\n  image: string | null;\n  name: string;\n  artistName: string | null;\n  id: string;\n  handleClick: (id: string) => void;\n  selected?: boolean;\n}\n\nconst PlaylistItem = ({\n  image,\n  name,\n  artistName,\n  id,\n  handleClick,\n  selected,\n}: PlaylistItemProps) => {\n  return (\n    <PlayListItemContainer\n      onClick={() => handleClick(id)}\n      selected={selected || false}\n    >\n      <ListItemAvatar>\n        {image ? <PlaylistAvatar src={image} alt={name} /> : \"No image\"}\n      </ListItemAvatar>\n      <ListItemText\n        primary={<PlaylistName>{name}</PlaylistName>}\n        secondary={\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            {artistName}\n          </Typography>\n        }\n      />\n    </PlayListItemContainer>\n  );\n};\n\nexport default PlaylistItem;\n","import React, { useState } from \"react\";\n\nimport PlaylistItem from \"../../common/components/PlaylistItem\";\nimport { SimplifiedPlaylistObject } from \"../../models/playlist\";\nimport { useNavigate } from \"react-router\";\n\ninterface PlaylistProps {\n  playlists: SimplifiedPlaylistObject [];\n}\n\nconst Playlist = ({ playlists }: PlaylistProps) => {\n  const [selectedId, setSelectedId] = useState<string>(\"\");\n  const navigate = useNavigate();\n  const handleItemClick = (id: string) => {\n    setSelectedId(id);\n    navigate(`/playlist/${id}`);\n  };\n  return (\n    <div>\n      {playlists.map((item) => (\n        <PlaylistItem\n          selected={selectedId === item.id}\n          handleClick={handleItemClick}\n          name={item.name || \"\"}\n          image={(item.images && item.images[0]?.url) || null}\n          id={item.id || \"\"}\n          key={item.id}\n          artistName={\"Playlist •\" + item.owner?.display_name}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Playlist;\n\n","import { SPOTIFY_BASE_URL } from \"../configs/commonConfig\";\nimport { User } from \"../models/user\";\nimport api from \"../utils/api\";\n\nexport const getCurrentUserProfile = async () : Promise<User> => {\n    try{\n        const response = await api.get(`/me`);\n        return response.data;\n    } catch (error) {\n        throw new Error(\"fail to fetch user profile\");\n    }\n};","import { useQuery, UseQueryResult } from \"@tanstack/react-query\"\nimport { getCurrentUserProfile } from \"../apis/userApi\"\nimport { User } from \"../models/user\";\n\nconst useGetCurrentUserProfile = (): UseQueryResult<User, Error>  => {\n    const accessToken = localStorage.getItem(\"access_token\");\n    return useQuery({\n        queryKey: ['current-user-profile'],\n        queryFn: getCurrentUserProfile,\n        enabled: !!accessToken,\n    });\n};\n\nexport default useGetCurrentUserProfile;","import React, { useEffect } from 'react'\nimport EmptyPlaylist from \"./EmptyPlaylist\";\nimport useGetCurrentUserPlaylists from '../../hooks/useGetCurrentUserPlaylists';\nimport LoadingSpinner from '../../common/components/LoadingSpinner';\nimport ErrorMessage from '../../common/components/ErrorMessage';\nimport { Button, Card, styled, Typography } from '@mui/material';\nimport Playlist from './Playlist';\nimport useGetCurrentUserProfile from '../../hooks/useGetCurrentUserProfile';\nimport { useInView } from 'react-intersection-observer';\n\nconst PlaylistContainer = styled(\"div\")(({ theme }) => ({\n  overflowY: \"auto\",\n  maxHeight: \"calc(100vh - 240px)\",\n  height: \"100%\",\n  \"&::-webkit-scrollbar\": {\n    display: \"none\",\n    msOverflowStyle: \"none\", \n    scrollbarWidth: \"none\", \n  },\n  [theme.breakpoints.down(\"sm\")]: {\n    maxHeight: \"calc(100vh - 65px - 119px)\",\n  },\n}));\nconst Library = () => {\n  const { ref, inView } = useInView();\n  const {\n    data,\n    isLoading,\n    error,\n    hasNextPage,\n    isFetchingNextPage,\n    fetchNextPage\n  } = useGetCurrentUserPlaylists({ limit: 10, offset: 0 });\n \n  \n  const { data: user } = useGetCurrentUserProfile();\n  useEffect(() => {\n    if (inView && hasNextPage && !isFetchingNextPage){\n      fetchNextPage()\n    }\n  }, [inView]);\n  if (!user) return <EmptyPlaylist />;\n   console.log(\"ddd\", data);\n  \n  if (isLoading) {\n    return <LoadingSpinner />;\n  }\n\n  if (error) {\n    return <ErrorMessage errorMessage={error.message} />;\n  }\n  \n  return (\n    <div>\n      {!data ||data?.pages[0].total === 0 ? (\n        <EmptyPlaylist />\n      ) : (\n        <PlaylistContainer>\n          {data?.pages.map((page, index) => (\n            <Playlist playlists={data.pages[0].items} key = {index}/>\n          ))}\n          <div ref={ref}>\n            {isFetchingNextPage && <LoadingSpinner />}\n          </div>\n\n        </PlaylistContainer>\n      )}\n    </div>\n  );\n};\n\nexport default Library;\n\n\nfunction userGetCurrentUserProfile(): { data: any; } {\n  throw new Error('Function not implemented.');\n}\n\n","import { useInfiniteQuery} from \"@tanstack/react-query\"\nimport { GetCurrentUserPlaylistRequest } from \"../models/playlist\";\nimport { getCurrentUserPlaylists } from \"../apis/playlistAPi\";\n\nconst useGetCurrentUserPlaylists = ({limit, offset}: GetCurrentUserPlaylistRequest) => {\n\n    return useInfiniteQuery({\n        queryKey: [\"current-user-playlists\", limit, offset],\n        queryFn:({ pageParam = 0 }) => {\n            return getCurrentUserPlaylists({limit, offset: pageParam});\n        },\n        initialPageParam: 0,\n        getNextPageParam: (lastPage) => {\n            if(lastPage.next) {\n                const url = new URL (lastPage.next)\n                const nextOffset = url.searchParams.get(\"offset\")\n                return nextOffset ? parseInt(nextOffset): undefined\n            }\n        return undefined;\n        },\n    });\n};\n\nexport default useGetCurrentUserPlaylists;","import { GetCurrentUserPlaylistRequest, GetCurrentUserPlaylistResponse } from \"../models/playlist\"\nimport api from \"../utils/api\"\n\nexport const getCurrentUserPlaylists = async({limit, offset}:\n    GetCurrentUserPlaylistRequest): Promise<GetCurrentUserPlaylistResponse> => {\n    try {\n        const response = await api.get(`/me/playlists`,{\n            params: {limit, offset}\n        })\n        return response.data;\n    } catch (error) {\n        throw new Error (\"Failed to fetch current user playlists\")\n    }\n}","export const generateRandomString = (length: number): string => {\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const values = crypto.getRandomValues(new Uint8Array(length));\n  return values.reduce((acc, x) => acc + possible[x % possible.length], \"\");\n};\n\nexport const sha256 = async (plain: string): Promise<ArrayBuffer> => {\n  const encoder = new TextEncoder()\n  const data = encoder.encode(plain)\n  return window.crypto.subtle.digest('SHA-256', data)\n};\n\nexport const base64encode = (input: ArrayBuffer): string => {\n  return btoa(String.fromCharCode(...new Uint8Array(input)))\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n};\n\n\n\n\n","import { Button } from '@mui/material'\nimport React from 'react'\nimport { getSpotifyAuthUrl } from '../../utils/auth'\n\nconst LoginButton = () => {\n  const login = () => {\n    getSpotifyAuthUrl()\n  }\n\n\n  return (\n    <Button variant = \"contained\" color= \"secondary\" size = \"large\" onClick= {login} >\n      Login\n    </Button>\n  )\n}\n\nexport default LoginButton\n","import { CLIENT_ID, SCOPES } from \"../configs/authConfig\";\nimport { REDIRECT_URI } from \"../configs/commonConfig\";\nimport { AuthUrlParams } from \"../models/auth\";\nimport { base64encode, generateRandomString, sha256 } from \"./crypto\";\n\nexport const getSpotifyAuthUrl = async () => {\n    const codeVerifier  = generateRandomString(64);\n    const hashed = await sha256(codeVerifier)\n    const codeChallenge = base64encode(hashed);\n    const clientId = CLIENT_ID;\n    const redirectUri = REDIRECT_URI;\n\n    const scope = SCOPES;\n    const authUrl = new URL(\"https://accounts.spotify.com/authorize\");\n\n    // generated in the previous step\n    window.localStorage.setItem('code_verifier', codeVerifier);\n\n    if (clientId && redirectUri) {\n        const params: AuthUrlParams =  {\n            response_type: 'code',\n            client_id: clientId,\n            scope,\n            code_challenge_method: 'S256',\n            code_challenge: codeChallenge,\n            redirect_uri: redirectUri,\n        };\n        authUrl.search = new URLSearchParams(Object.entries(params)).toString();\n        window.location.href = authUrl.toString(); // open spotify login add\n    };\n};\n\n\n","export default __webpack_public_path__ + \"images/blank_profile.png?ver=7a6a6c54279a54d1977c9127957a503b\";","import { Avatar, Box, styled } from \"@mui/material\";\nimport React from 'react'\nimport LoginButton from \"../../common/components/LoginButton\";\nimport useGetCurrentUserProfile from \"../../hooks/useGetCurrentUserProfile\";\nimport fallbackImage from \"./blank_profile.png\"\n\nconst ProfileContainer = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n  cursor: \"pointer\",\n  borderRadius: \"8px\",\n  padding: \"0 8px\",\n  height: \"100%\",\n});\n\nconst Navbar = () => {\n  const {data: userProfile} = useGetCurrentUserProfile();\n  const profileImage = userProfile?.images?.[0]?.url || fallbackImage;\n\n  return (\n    <Box \n        display=\"flex\"\n        justifyContent=\"flex-end\"\n        alignItems=\"center\"\n        height= \"64px\"\n    >\n      {userProfile ? (\n        <ProfileContainer>\n            <Avatar\n            src= {profileImage}\n            alt= {userProfile.display_name}\n            />        \n        </ProfileContainer>\n\n    ) : (<LoginButton />)}\n    </Box>\n  )\n}\nexport default Navbar\n","import { styled, Box, Typography, useMediaQuery, useTheme } from \"@mui/material\"\nimport React from 'react'\nimport { Outlet, NavLink, } from 'react-router'\nimport HomeIcon from '@mui/icons-material/Home'\nimport SearchIcon from '@mui/icons-material/Search'\nimport LibraryHead from './components/LibraryHead'\nimport Library from \"./components/Library\"\nimport Navbar from \"./components/Navbar\"\n\nconst Layout = styled(\"div\")({\n  display: \"flex\",\n  height: \"100vh\",\n  padding: \"8px\",\n  gap: '8px',\n});\n\nconst Sidebar = styled(\"div\")(({theme}) => ({\n  width: \"331px\",\n  height: \"100%\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  [theme.breakpoints.down(\"sm\")]: {\n    display: \"none\",\n  },\n  gap: \"8px\",\n}));\n\nconst MainContentBox = styled(Box)(({ theme }) => ({\n  borderRadius: \"8px\",\n  backgroundColor: theme.palette.background.paper,\n  color: theme.palette.text.primary,\n  width: \"100%\",\n  overflowY: 'auto',\n  overflowX: 'hidden', \n  padding: \"1rem\",\n}));\n\nconst ContentBox = styled(Box)(({theme}) => ({\n  borderRadius: \"8px\",\n  backgroundColor: theme.palette.background.paper,\n  color: theme.palette.text.primary,\n  width: \"100%\",\n  padding: \"10px\",\n}));\n\nconst NavList = styled(\"ul\")({\n  listStyle: \"none\",\n  padding: 0,\n  margin: 0,\n});\n\nconst StyledNavLink = styled(NavLink) (({theme}) => ({\n  textDecoration: \"none\",\n  display: \"flex\",\n  alignItems: \"center\",\n  gap: \"20px\",\n  color: theme.palette.text.secondary,\n  \"&:hover\": {\n    color:theme.palette.text.primary\n  },\n  \"&.active\":{\n    color: theme.palette.text.primary\n  },\n}));\n\nconst AppLayout = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  return (\n    <Layout>\n        <Sidebar>\n          <ContentBox>\n            <NavList>\n              <li>\n                <StyledNavLink to = \"/\">\n                  <HomeIcon/>\n                  <Typography variant = \"h2\" fontWeight= {700}>Home</Typography>\n                </StyledNavLink>\n              </li>\n              <li>\n                <StyledNavLink to = \"search\">\n                  <SearchIcon/>\n                  <Typography variant = \"h2\" fontWeight= {700}>Search</Typography>\n                </StyledNavLink>\n              </li>\n            </NavList>\n          </ContentBox>\n          <ContentBox sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>\n            <LibraryHead/>\n            <Library/>\n          </ContentBox>\n        </Sidebar>\n\n        <MainContentBox sx={{ p: { xs: 0, sm: 1, md: 2}}}>\n          <Navbar/>\n          <Outlet/>\n        </MainContentBox>\n\n    </Layout>\n  )\n}\n\nexport default AppLayout;\n"],"names":["_ref","errorMessage","_jsx","Alert","severity","children","Head","styled","display","alignItems","padding","justifyContent","LibraryHead","_jsxs","Box","BookmarkIcon","sx","marginRight","Typography","variant","fontWeight","Button","AddIcon","EmptyPlaylistCard","Card","theme","backgroundColor","palette","background","paper","borderRadius","CreatePlaylistButton","marginTop","EmptyPlaylist","color","api","axios","create","baseURL","SPOTIFY_BASE_URL","headers","Authorization","concat","localStorage","getItem","interceptors","request","use","PlayListItemContainer","ListItemButton","selected","action","active","hover","PlaylistAvatar","Avatar","width","height","PlaylistName","_ref2","image","name","artistName","id","handleClick","onClick","ListItemAvatar","src","alt","ListItemText","primary","secondary","playlists","selectedId","setSelectedId","useState","navigate","useNavigate","handleItemClick","map","item","_item$images$","_item$owner","PlaylistItem","images","url","owner","display_name","getCurrentUserProfile","async","get","data","error","Error","useGetCurrentUserProfile","accessToken","useQuery","queryKey","queryFn","enabled","PlaylistContainer","overflowY","maxHeight","msOverflowStyle","scrollbarWidth","breakpoints","down","Library","ref","inView","useInView","isLoading","hasNextPage","isFetchingNextPage","fetchNextPage","limit","offset","useInfiniteQuery","pageParam","params","getCurrentUserPlaylists","initialPageParam","getNextPageParam","lastPage","next","nextOffset","URL","searchParams","parseInt","undefined","useGetCurrentUserPlaylists","user","useEffect","console","log","LoadingSpinner","ErrorMessage","message","pages","total","page","index","Playlist","items","LoginButton","size","login","codeVerifier","crypto","getRandomValues","Uint8Array","reduce","acc","x","possible","codeChallenge","input","TextEncoder","encode","plain","window","subtle","digest","sha256","btoa","String","fromCharCode","replace","clientId","CLIENT_ID","redirectUri","REDIRECT_URI","scope","SCOPES","authUrl","setItem","response_type","client_id","code_challenge_method","code_challenge","redirect_uri","search","URLSearchParams","Object","entries","toString","location","href","getSpotifyAuthUrl","ProfileContainer","cursor","Navbar","_userProfile$images","userProfile","profileImage","fallbackImage","Layout","gap","Sidebar","flexDirection","MainContentBox","text","overflowX","ContentBox","_ref3","NavList","listStyle","margin","StyledNavLink","NavLink","_ref4","textDecoration","AppLayout","useTheme","useMediaQuery","to","HomeIcon","SearchIcon","flexGrow","p","xs","sm","md","Outlet"],"sourceRoot":""}